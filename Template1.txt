
//Q1
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>

/*
 * Complete the function below.
 */
void sort(int *array, int num_elements) {
	int i, j; 
	for (int i = 0; i<num_elements-1; i++)
	{
		for (int j = 0; j < num_elements - i -1; j++)
		{
			if (array[j] < array[j + 1])
			{
				int temp = array[j + 1];
				array[j + 1] = array[j]; 
				array[j] = temp; 
			}
		}
	}
}

static int is_sorted(int num_elements)
{
    int val;
    int i;

    if (!num_elements)
    {
        return 1;
    }
    if (num_elements == 1)
    {
        return 1;
    }

    val = elements[0];
    for (i = 1; i < num_elements; i++)
    {
        if (val < elements[i])
        {
            return 0;
        }
        val = elements[i];
    }
    return 1;
}



int main(int argc, char *argv[])
{
    char in[100];
    int num_elements;
    int val;
    int i;

    num_elements = 0;
    while (fgets(in, sizeof(in), stdin))
    {
        val = strtol(in, 0, 0);
        if (!val)
        {
            break;
        }
        if (num_elements >= MAX_ELEMENTS)
        {
            printf("Test Input failure!!\n");
            exit(1);
        }
        elements[num_elements++] = strtol(in, 0, 0);
    }
    sort(elements, num_elements);

    printf("%s\n", is_sorted(num_elements) ? "yes" : "no");


}


#define MAX_ELEMENTS    1000

static int elements[MAX_ELEMENTS];


//Q2
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>

int reverse(int in) {

	in = ((in >> 1) & 0x55555555u) | ((in & 0x55555555u) << 1);
	in = ((in >> 2) & 0x33333333u) | ((in & 0x33333333u) << 2);
	in = ((in >> 4) & 0x0f0f0f0fu) | ((in & 0x0f0f0f0fu) << 4);
	in = ((in >> 8) & 0x00ff00ffu) | ((in & 0x00ff00ffu) << 8);
	in = ((in >> 16) & 0xffffu) | ((in & 0xffffu) << 16);
	return in;
}

static void print_bits(int in)
{
	int i;
	unsigned int mask;

	mask = 0x80000000;
	for (i = 0; i < 32; i++)
	{
		printf("%s", in & mask ? "1" : "0");
		mask >>= 1;
	}
	printf("\n");
}

int main()
{
	char in[100];
	int val;

	while (fgets(in, sizeof(in), stdin))
	{
		val = strtol(in, 0, 0);
		if (val)
		{
			print_bits(val);
			print_bits(reverse(val));
		}
	}
}
//Q3
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>

struct item
{
	int key;
	struct item *next;
};

static struct item *head;


/*
 * Complete the function below.
 */
struct item *remove_from_list(int key) {
	struct item *tmp; 
	struct item *prev;
	//traverse the linked list
	for (tmp = head; tmp != NULL; tmp = tmp->next)
	{
		
		//compare key
		if (tmp->key == key)
		{
            //first node
			if (tmp == head)
			{
				head = tmp->next;
			}
            //middle node 
			else{
			prev->next = tmp->next; 
			}
            free(tmp);
			return 1; 
		}
		prev = tmp; 
	}
	return 0; 
}

static void insert(int key)
{
	struct item *n;
	struct item *p;
	struct item *q;

	n = malloc(sizeof(struct item));
	if (!n)
	{
		printf("Internal test failure!!\n");
		exit(1);
	}

	n->key = key;
	n->next = 0;
	for (q = 0, p = head; p; q = p, p = p->next);
	if (!q)
	{
		/*
			insert at head of list
		*/
		head = n;
		return;
	}
	q->next = n;
}

static void dumpit()
{
    struct item *p;

    if (!head)
    {
        printf("empty list\n");
        return;
    }

    for (p = head; p; p = p->next)
    {
        printf("%d\n", p->key);
    }
}


int main(int argc, char *argv[])
{

	char in[100];
	int val;

	while (fgets(in, sizeof(in), stdin))
	{
		val = strtol(in, 0, 0);
		if (val == 0)
		{
			break;
		}
		insert(val);
	}

	if (!fgets(in, sizeof(in), stdin))
	{
		printf("Input failure!!\n");
		exit(1);
	}
	val = strtol(in, 0, 0);

	remove_from_list(val);
	

	dumpit();

	return 0;
}

// Q4
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>


/*
* Complete the function below.
*/
static int lexer(char *in, int bytes) {
	bool is_valid = true; 
	bool is_decimal = false; 

	for (int i = 0; i < bytes; i++)
	{
		//printf("%c", in[i]); 
		if (!(in[i] >= '0' && in[i] <= '9')) //is_digit
		{
			if (in[i] == '.' && !is_decimal)
			{
				is_decimal = true; 
			}
			else if (i == 0 && (in[i] == '-' || in[i] == '+'))
			{
				//is_signed
			}
			else 
			{
				is_valid = false; 
				return -1; 
			}
		}

		if (bytes == 1)
		{
			if (!(in[i] >= '0' && in[i] <= '9')) //is_digit
			{
				is_valid = false;
				return -1;
			}
		}
	}
	return 0;
}

int main()
{
	int i;
	char input[1024];
	int ioffset;
	unsigned char kin;          // keyboard input 

	fgets(input, sizeof(input), stdin);
	ioffset = strlen(input);
	if (lexer(input, ioffset - 1) >= 0)
	{
		printf("yes\n");
	}
	else
	{
		printf("no\n");
	}
}

